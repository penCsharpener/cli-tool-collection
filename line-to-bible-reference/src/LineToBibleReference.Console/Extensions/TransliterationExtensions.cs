using System.Text;

namespace LineToBibleReference.Console.Extensions;
public static class TransliterationExtensions
{
    private static readonly Dictionary<char, string> _consonantTranslitDict = new()
    {
        {'א', "ʾ"},
        {'ב', "b"},
        {'ג', "g"},
        {'ד', "d"},
        {'ה', "h"},
        {'ו', "w"},
        {'ז', "z"},
        {'ח', "ch"},
        {'ט', "t"},
        {'י', "y"},
        {'כ', "k"},
        {'ך', "k"},
        {'ל', "l"},
        {'מ', "m"},
        {'ם', "m"},
        {'נ', "n"},
        {'ן', "n"},
        {'ס', "s"},
        {'ע', "ʿ"},
        {'פ', "p"},
        {'ף', "p"},
        {'צ', "z"},
        {'ץ', "z"},
        {'ק', "q"},
        {'ר', "r"},
        {'ש', "sh"},
        {'ת', "t"}
    };

    private static readonly Dictionary<string, string> _vowelTranslitDict = new()
    {
        {"ַ", "a"},
        {"ָ", "a"},
        {"ֵ", "e"},
        {"ֶ", "e"},
        {"ִ", "i"},
        {"ֹ", "o"},
        {"ֻ", "u"},
        {"ְ", ""}
    };

    /// <summary>
    /// Generated by ChatGPT
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    public static string TransliterateHebrewToEnglish(string input)
    {
        var output = new StringBuilder();

        for (var i = 0; i < input.Length; i++)
        {
            var c = input[i];

            if (_consonantTranslitDict.ContainsKey(c))
            {
                output.Append(_consonantTranslitDict[c]);
            }
            else if (c is 'ֱ' or 'ֲ' or 'ֳ')
            {
                // Do nothing with shewa, hataf patach, and hataf segol vowels
            }
            else if (_vowelTranslitDict.ContainsKey(c.ToString()))
            {
                if (i > 0 && input[i - 1] == 'ו' && c == 'ֹ')
                {
                    output.Append("o"); // Special case for vav + cholam
                }
                else
                {
                    output.Append(_vowelTranslitDict[c.ToString()]);
                }
            }
            else
            {
                output.Append(c);
            }
        }
        return output.ToString();
    }
}
